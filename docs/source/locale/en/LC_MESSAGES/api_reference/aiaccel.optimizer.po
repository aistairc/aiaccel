# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022, AIST
# This file is distributed under the same license as the aiaccel package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2023.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: aiaccel \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-08-07 12:53+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language: en\n"
"Language-Team: en <LL@li.org>\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.11.0\n"

#: ../../source/api_reference/aiaccel.optimizer.rst:2
msgid "aiaccel.optimizer package"
msgstr ""

#: ../../source/api_reference/aiaccel.optimizer.rst:5
msgid "Submodules"
msgstr ""

#: ../../source/api_reference/aiaccel.optimizer.rst:8
msgid "aiaccel.optimizer.abstract\\_optimizer module"
msgstr ""

#: ../../source/api_reference/aiaccel.optimizer.rst:16
msgid "aiaccel.optimizer.budget\\_specified\\_grid\\_optimizer module"
msgstr ""

#: ../../source/api_reference/aiaccel.optimizer.rst:24
msgid "aiaccel.optimizer.create module"
msgstr ""

#: ../../source/api_reference/aiaccel.optimizer.rst:32
msgid "aiaccel.optimizer.grid\\_optimizer module"
msgstr ""

#: ../../source/api_reference/aiaccel.optimizer.rst:40
msgid "aiaccel.optimizer.motpe\\_optimizer module"
msgstr ""

#: ../../source/api_reference/aiaccel.optimizer.rst:48
msgid "aiaccel.optimizer.nelder\\_mead\\_optimizer module"
msgstr ""

#: ../../source/api_reference/aiaccel.optimizer.rst:56
msgid "aiaccel.optimizer.random\\_optimizer module"
msgstr ""

#: ../../source/api_reference/aiaccel.optimizer.rst:64
msgid "aiaccel.optimizer.sobol\\_optimizer module"
msgstr ""

#: ../../source/api_reference/aiaccel.optimizer.rst:72
msgid "aiaccel.optimizer.tpe\\_optimizer module"
msgstr ""

#: ../../source/api_reference/aiaccel.optimizer.rst:80
msgid "Module contents"
msgstr ""

#~ msgid "ベースクラス: :py:class:`~aiaccel.module.AbstractModule`"
#~ msgstr ""

#~ msgid "An abstract class for Optimizer classes."
#~ msgstr ""

#~ msgid "パラメータ"
#~ msgstr ""

#~ msgid "A dictionary containing command line options."
#~ msgstr ""

#~ msgid "type"
#~ msgstr ""

#~ msgid "dict[str, str | int | bool]"
#~ msgstr ""

#~ msgid "A ready number of hyperparameters."
#~ msgstr ""

#~ msgid "int"
#~ msgstr ""

#~ msgid "A running number of hyperprameters."
#~ msgstr ""

#~ msgid "A finished number of hyperparameters."
#~ msgstr ""

#~ msgid "A number of generated hyperparamters."
#~ msgstr ""

#~ msgid ""
#~ "Whether all parameters are generated. "
#~ "True if all parameters are generated."
#~ msgstr ""

#~ msgid "bool"
#~ msgstr ""

#~ msgid "Loaded hyper parameter configuration object."
#~ msgstr ""

#~ msgid "HyperParameterConfiguration"
#~ msgstr ""

#~ msgid "TrialId object."
#~ msgstr ""

#~ msgid "TrialId"
#~ msgstr ""

#~ msgid "Checks whether any unprocessed parameters are left."
#~ msgstr ""

#~ msgid ""
#~ "This method is beneficial for the "
#~ "case that the maximum number of "
#~ "parameter generation is limited by "
#~ "algorithm (e.g. grid search). To make"
#~ " this method effective, the algorithm "
#~ "with the parameter generation limit "
#~ "should turn `all_parameters_generated` True "
#~ "when all of available parameters are "
#~ "generated."
#~ msgstr ""

#~ msgid "戻り値"
#~ msgstr ""

#~ msgid "True if all parameters are generated and are processed."
#~ msgstr ""

#~ msgid "戻り値の型"
#~ msgstr ""

#~ msgid ""
#~ "Checks whether all parameters that can"
#~ " be generated with the given number"
#~ " of trials are registered."
#~ msgstr ""

#~ msgid ""
#~ "This method does not check whether "
#~ "the registered parameters have been "
#~ "processed."
#~ msgstr ""

#~ msgid "True if all parameters are registerd."
#~ msgstr ""

#~ msgid "Casts types of parameter values to appropriate tepes."
#~ msgstr ""

#~ msgid "list of parameters."
#~ msgstr ""

#~ msgid "例外"
#~ msgstr ""

#~ msgid "Occurs if any of parameter value could not be casted."
#~ msgstr ""

#~ msgid ""
#~ "A list of parameters with casted "
#~ "values. None if given `params` is "
#~ "None."
#~ msgstr ""

#~ msgid "Checks errors."
#~ msgstr ""

#~ msgid "True if there is no error."
#~ msgstr ""

#~ msgid "Generate a list of initial parameters."
#~ msgstr ""

#~ msgid "A created list of initial parameters."
#~ msgstr ""

#~ msgid "Generate a list of parameters."
#~ msgstr ""

#~ msgid "A created list of parameters."
#~ msgstr ""

#~ msgid "Causes when the inherited class does not     implement."
#~ msgstr ""

#~ msgid "Get any trial result."
#~ msgstr ""

#~ msgid "if the objective is multi-objective, return the list of objective."
#~ msgstr ""

#~ msgid "Trial ID."
#~ msgstr ""

#~ msgid "Any trial result."
#~ msgstr ""

#~ msgid "Returns pool size."
#~ msgstr ""

#~ msgid "Pool size."
#~ msgstr ""

#~ msgid "A main loop process. This process is repeated every main loop."
#~ msgstr ""

#~ msgid "The process succeeds or not. The main loop exits if failed."
#~ msgstr ""

#~ msgid "Post-procedure after executed processes."
#~ msgstr ""

#~ msgid "None"
#~ msgstr ""

#~ msgid "Pre-procedure before executing processes."
#~ msgstr ""

#~ msgid "Create hyper parameter files."
#~ msgstr ""

#~ msgid "A list of hyper parameter dictionaries."
#~ msgstr ""

#~ msgid "When in resume mode, load the previous optimization data in advance."
#~ msgstr ""

#~ msgid ""
#~ "ベースクラス: "
#~ ":py:class:`~aiaccel.optimizer.abstract_optimizer.AbstractOptimizer`"
#~ msgstr ""

#~ msgid "An optimizer class with grid search algorithm."
#~ msgstr ""

#~ msgid ""
#~ "Causes when the number of trials "
#~ "is smaller than the least     space "
#~ "size determined by the parameters of "
#~ "which the number of     choices is "
#~ "specified."
#~ msgstr ""

#~ msgid "Generates initial parameters."
#~ msgstr ""

#~ msgid "Causes when initial parameter could not be generated."
#~ msgstr ""

#~ msgid "A list of new parameters."
#~ msgstr ""

#~ msgid "Generates parameters."
#~ msgstr ""

#~ msgid "Returns master type."
#~ msgstr ""

#~ msgid "Path to the configuration file."
#~ msgstr ""

#~ msgid "Subclass of aiaccel.optimizer.abstract_optimizer.AbstractOptimizer."
#~ msgstr ""

#~ msgid "Imports the specified Optimizer class."
#~ msgstr ""

#~ msgid "Optimizer class name, e.g. aiaccel.optimizer.NelderMeadOptimizer"
#~ msgstr ""

#~ msgid "A list of ready hyper parameters."
#~ msgstr ""

#~ msgid "list[dict]"
#~ msgstr ""

#~ msgid "A number of generated hyper parameters."
#~ msgstr ""

#~ msgid ""
#~ "Grid search algorithm always ignores the"
#~ " initial values in configulation file "
#~ "even if given."
#~ msgstr ""

#~ msgid "Causes when the parameter is not generated."
#~ msgstr ""

#~ msgid "Generate parameters."
#~ msgstr ""

#~ msgid "A list of new     parameters. None if all of parameters are generated."
#~ msgstr ""

#~ msgid "A list of new"
#~ msgstr ""

#~ msgid "parameters. None if all of parameters are generated."
#~ msgstr ""

#~ msgid "Get a next parameter index."
#~ msgstr ""

#~ msgid "It returns None if all parameters are already generated."
#~ msgstr ""

#~ msgid "Make a list of all parameters for this grid."
#~ msgstr ""

#~ msgid "A hyper parameter object."
#~ msgstr ""

#~ msgid "A config object."
#~ msgstr ""

#~ msgid "A dictionary including all grid parameters."
#~ msgstr ""

#~ msgid "Causes when an invalid parameter type is set."
#~ msgstr ""

#~ msgid "Get options about grid search."
#~ msgstr ""

#~ msgid "A parameter name to get its options."
#~ msgstr ""

#~ msgid ""
#~ "The first one is a base of "
#~ "logarithm parameter. The second one is"
#~ " logarithm parameter or not. The "
#~ "third one is a step of the "
#~ "grid."
#~ msgstr ""

#~ msgid "Causes when step is not specified."
#~ msgstr ""

#~ msgid "ベースクラス: :py:class:`~aiaccel.optimizer.tpe_optimizer.TpeOptimizer`"
#~ msgstr ""

#~ msgid "An optimizer class based on multi-objective optuna.samplers.TPESampler."
#~ msgstr ""

#~ msgid "Create the optuna.study object."
#~ msgstr ""

#~ msgid "An optimizer class with nelder mead algorithm."
#~ msgstr ""

#~ msgid "A dictionary containing"
#~ msgstr ""

#~ msgid "A class object implementing Nelder-Mead method."
#~ msgstr ""

#~ msgid "NelderMead"
#~ msgstr ""

#~ msgid "A pool of parameters waiting for the process."
#~ msgstr ""

#~ msgid "list"
#~ msgstr ""

#~ msgid "A list of parameters being processed."
#~ msgstr ""

#~ msgid "Generate initial parameters."
#~ msgstr ""

#~ msgid ""
#~ "A list of new parameters. None if"
#~ " `self.nelder_mead` is already defined."
#~ msgstr ""

#~ msgid "A list of created parameters."
#~ msgstr ""

#~ msgid "Get the list of Nelder-Mead result."
#~ msgstr ""

#~ msgid "Results per trial."
#~ msgstr ""

#~ msgid "Get the list of ready parameters."
#~ msgstr ""

#~ msgid "Nelder Mead's main module."
#~ msgstr ""

#~ msgid "Result of optimization."
#~ msgstr ""

#~ msgid ""
#~ "When using ordinal types in NelderMead,"
#~ " the array index is predicted. "
#~ "https://github.com/aistairc/aiaccel/issues/175"
#~ msgstr ""

#~ msgid "Update hyperparameter's names."
#~ msgstr ""

#~ msgid "old parameter name"
#~ msgstr ""

#~ msgid "New parameter name"
#~ msgstr ""

#~ msgid "before::"
#~ msgstr ""

#~ msgid "after::"
#~ msgstr ""

#~ msgid "An optimizer class with a random algorithm."
#~ msgstr ""

#~ msgid "An optimizer class with sobol algorithm."
#~ msgstr ""

#~ msgid "Engine for generating (scrambled) Sobol' sequences."
#~ msgstr ""

#~ msgid "Sobol"
#~ msgstr ""

#~ msgid "課題"
#~ msgstr ""

#~ msgid ""
#~ "Make it clear to resume this "
#~ "optimizer with Sobol sampler. Currentcode "
#~ "resume the sampler counts with a "
#~ "number of FINISHED PARAMETER FILES. "
#~ "Confirm whether the current code resumes"
#~ " for any timings of quits."
#~ msgstr ""

#~ msgid "ベースクラス: :py:class:`~optuna.samplers._tpe.sampler.TPESampler`"
#~ msgstr ""

#~ msgid "Get a number of startup trials in TPESampler."
#~ msgstr ""

#~ msgid "A number of startup trials."
#~ msgstr ""

#~ msgid "An optimizer class based on optuna.samplers.TPESampler."
#~ msgstr ""

#~ msgid "A dictionary of parameters."
#~ msgstr ""

#~ msgid "dict[int, list[dict[str, float | int | str]]]"
#~ msgstr ""

#~ msgid "A list of HyperParameter objects."
#~ msgstr ""

#~ msgid "list[HyperParameter]"
#~ msgstr ""

#~ msgid "Study name."
#~ msgstr ""

#~ msgid "str"
#~ msgstr ""

#~ msgid "optuna.study.Study object."
#~ msgstr ""

#~ msgid ""
#~ "A dictionary of optuna.distributions objects"
#~ " defined for individual parameters."
#~ msgstr ""

#~ msgid "dict[str, optuna.distributions]"
#~ msgstr ""

#~ msgid "A dictionary of optuna.trial.Trial objects."
#~ msgstr ""

#~ msgid "dict[int, optuna.trial.Trial]"
#~ msgstr ""

#~ msgid "Random seed."
#~ msgstr ""

#~ msgid "Check the result files and add it to sampler object."
#~ msgstr ""

#~ msgid "Create the optuna.study object and store it."
#~ msgstr ""

#~ msgid "A number of generating parameters. Defaults to 1."
#~ msgstr ""

#~ msgid "Is a current trial startup trial or not."
#~ msgstr ""

#~ msgid "Pre-Procedure before executing optimize processes."
#~ msgstr ""

#~ msgid "Create an optuna.distributions dictionary for the parameters."
#~ msgstr ""

#~ msgid "A parameter configuration object."
#~ msgstr ""

#~ msgid ""
#~ "Occurs when parameter type is other "
#~ "than 'float', 'int',     'categorical', or "
#~ "'ordinal'."
#~ msgstr ""

#~ msgid "An optuna.distributions object."
#~ msgstr ""

#~ msgid "ベースクラス: :py:class:`object`"
#~ msgstr ""

#~ msgid "A class implementing Nelder-Mead method."
#~ msgstr ""

#~ msgid "A list of hyper parameter objects."
#~ msgstr ""

#~ msgid "A max iteration counts. Defaults to float('inf')."
#~ msgstr ""

#~ msgid "A coefficient values. Defaults to None."
#~ msgstr ""

#~ msgid "Evaluate maximize or not. Defaults to False."
#~ msgstr ""

#~ msgid "A initial parameters. Defaults to None."
#~ msgstr ""

#~ msgid "A reference to a random generator. Defaults to None."
#~ msgstr ""

#~ msgid "A list of boundaries."
#~ msgstr ""

#~ msgid "np.ndarray"
#~ msgstr ""

#~ msgid "A dictionary of coefficients."
#~ msgstr ""

#~ msgid "dict[str, float]"
#~ msgstr ""

#~ msgid "A list of evaluated parameter results."
#~ msgstr ""

#~ msgid "A logger object."
#~ msgstr ""

#~ msgid "logging.Logger"
#~ msgstr ""

#~ msgid "A list of hyper parameters."
#~ msgstr ""

#~ msgid "A dictionary to store temporal calculation results."
#~ msgstr ""

#~ msgid "dict[str, float | None]"
#~ msgstr ""

#~ msgid "A list of current evaluated parameters."
#~ msgstr ""

#~ msgid "A current centroid value of y."
#~ msgstr ""

#~ msgid "float"
#~ msgstr ""

#~ msgid "A count of evaluation each loop."
#~ msgstr ""

#~ msgid "A list to store candidates to be executed."
#~ msgstr ""

#~ msgid "A number to be added to executing list."
#~ msgstr ""

#~ msgid "A temporal result of Expand."
#~ msgstr ""

#~ msgid "A temporal result of Inside Contraction."
#~ msgstr ""

#~ msgid "A temporal result of Outside Contraction."
#~ msgstr ""

#~ msgid "A temporal result of Reflection"
#~ msgstr ""

#~ msgid "A storage of execution history of each value and operator."
#~ msgstr ""

#~ msgid "dict[str, list[float | str]]"
#~ msgstr ""

#~ msgid "Evaluate the result as maximize or minimize."
#~ msgstr ""

#~ msgid "A number of max iterations. This is compared with _evaluated_itr."
#~ msgstr ""

#~ msgid "A number of Shrink."
#~ msgstr ""

#~ msgid "Is a current iteration out of boundaries or not."
#~ msgstr ""

#~ msgid "A list of results for _executing."
#~ msgstr ""

#~ msgid "list[float]"
#~ msgstr ""

#~ msgid "A current state."
#~ msgstr ""

#~ msgid ""
#~ "A number of iterations. Currently same"
#~ " with _evaluated_itr. It's different if "
#~ "counts out of boundaries."
#~ msgstr ""

#~ msgid "Fix float comparison errors."
#~ msgstr ""

#~ msgid "Add a new result."
#~ msgstr ""

#~ msgid "A dictionary of a result parameter."
#~ msgstr ""

#~ msgid ""
#~ "Proceed a search step. One search "
#~ "method does not increment the iteration."
#~ " It increments when finalize method "
#~ "is called."
#~ msgstr ""

#~ msgid "The details of state transitions are as follows: ::"
#~ msgstr ""

