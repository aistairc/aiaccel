generic:
  workspace: /tmp/work
  job_command: python original_main.py
  python_file: original_main.py
  function: main
  batch_job_timeout: 600

resource:
  type: python_local
  num_workers: 4

abci:
  group: '[group]'
  job_script_preamble: ./job_script_preamble.sh
  job_execution_options": ''

optimize:
  search_algorithm: aiaccel.optimizer.BudgetSpecifiedGridOptimizer
  goal: minimize
  trial_number: 10
  rand_seed: 42
  grid_accept_small_trial_number: true
  grid_sampling_method: IN_ORDER
  parameters:
    -
      name: x1
      type: uniform_float
      log: true
      lower: -1.0
      upper: 1.0
      num_numeric_choices: 3
    -
      name: x2
      type: uniform_float
      log: false
      lower: -5.0
      upper: 5.0
    -
      name: x3
      type: uniform_int
      log: true
      lower: 1
      upper: 10_000_000_000
    -
      name: x4
      type: uniform_int
      log: false
      lower: -5
      upper: 5
    -
      name: x5
      type: categorical
      choices: ['a', 'b', 'c']
    -
      name: x6
      type: ordinal
      sequence: [-5, 0, 5]


job_setting:
  name_length: 6
  init_fail_count: 100
  cancel_retry: 3
  cancel_timeout: 60
  expire_retry: 3
  expire_timeout: 60
  finished_retry: 3
  finished_timeout: 60
  job_loop_duration: 0.5
  job_retry: 2
  job_timeout: 60
  kill_retry: 3
  kill_timeout: 60
  result_retry: 1
  runner_retry: 3
  runner_timeout: 60
  running_retry: 3
  running_timeout: 60

# sleep_time:
#   master: 1
#   optimizer: 1
#   scheduler: 1

logger:
  file:
    master: "master.log"
    optimizer: "optimizer.log"
    scheduler: "scheduler.log"
  log_level:
    master: "DEBUG"
    optimizer: "DEBUG"
    scheduler: "DEBUG"
  stream_level:
    master: "DEBUG"
    optimizer: "CRITICAL"
    scheduler: "CRITICAL"
